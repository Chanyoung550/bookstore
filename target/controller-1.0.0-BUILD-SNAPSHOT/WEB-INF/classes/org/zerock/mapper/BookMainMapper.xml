<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.mapper.BookMainMapper">

<!-- 출간일 순서대로 10개의 책을 가져옴 -->
<select resultType="org.zerock.domain.Bs_BookVO" id="dateselect">
	select * from bs_book order by bk_pdate desc limit 10
</select>

<!-- 유저아이디에 관련된 유저정보를 가져옴. -->
<select resultType="org.zerock.domain.Bs_UserVO" id="login">
	select * from bs_user where user_id = #{user_id} 
</select>

<!-- 유저아이디가 존재하는지 체크. -->
<select resultType="int" id="idCheck">
	select count(*) from bs_user where user_id=#{user_id} 
</select>

<!-- 회원가입하는 정보를 데이터베이스에 저장. -->
<insert id="register">
   insert into bs_user(user_id, user_pw, user_phone, user_name, user_addr, user_email)
   values (#{user_id},#{user_pw},#{user_phone},#{user_name}, #{user_addr}, #{user_email}) 
</insert>

<!-- 아이디찾기를 위한 추가  -->
<select resultType="org.zerock.domain.Bs_UserVO" id="mailCheck">
	select * from bs_user where user_email = #{user_email} and user_name = #{user_name}
</select>

<select resultType="int" id="mailCheckCnt">
	select count(*) from bs_user where user_email = #{user_email} and user_name = #{user_name}
</select>

<!-- 비밀번호찾기를 위한 추가 -->
<select resultType="org.zerock.domain.Bs_UserVO" id="pasmailCheck">
	select * from bs_user where user_email = #{user_email} and user_id = #{user_id}
</select>

<select resultType="int" id="pasmailCheckCnt">
	select count(*) from bs_user where user_email = #{user_email} and user_id = #{user_id}
</select>

<!-- 책에대한 정보와 유저아이디를 데이터베이스에 저장 -->
<insert id="addcart">
	insert into bs_cart(user_id, od_num, bk_num)values (#{user_id}, #{od_num}, #{bk_num}) 
</insert>

<!-- 댓글을 데이터베이스에 저장. -->
<insert id="comment">
	insert into bs_review(rev_rank, user_id, bk_num, rev_comment)
	values(#{rev_rank}, #{user_id}, #{bk_num}, #{rev_comment}) 
</insert>

<!-- 유저아이디와 책번호를 넘겨서 로그인된 유저가 책을 구매했는지 확인 -->
<select resultType="int" id="ordCheck">
	select count(od_num) from bs_order where user_id=#{user_id} and bk_num=#{bk_num} 
</select>

<!-- 책번호를 넘겨서 책에대한 평점을 더함(책에대한 평점이 없으면 0) -->
<select resultType="_double" id="selectsum">
	select ifnull(sum(rev_rank), 0) from bs_review where bk_num = #{bk_num} 
</select>


<!-- 책번호를 넘겨서 책에대한 평점을 카운트함 -->
<select resultType="int" id="rankcount">
	select count(rev_rank) from bs_review where bk_num = #{bk_num} 
</select>

<!-- 댓글번호를 넘겨서 댓글 삭제 -->
<delete id="commentdelete">
	delete from bs_review where rev_num = #{rev_num} 
</delete>

<!-- 댓글번호를 넘겨서 댓글 업데이트 -->
<update id="commentupdate">
	update bs_review set rev_rank = #{rev_rank}, rev_comment = #{rev_comment} where rev_num = #{rev_num}
</update>

<!-- 카테고리를 넘겨서 10권씩 가져옴. -->
<select id="getBookList" resultType="org.zerock.domain.Bs_BookVO">
	select * from bs_book
	where bk_category = #{code}
	limit #{startList}, #{listSize}
</select>

<!-- 카테고리를 넘겨서 카테고리 전체 수를 가져옴. -->
<select id="getBookListCnt" resultType="int">
	select count(*) as listCnt
	from bs_book
	where bk_category = #{code}
</select>

<!-- 검색된 타입과 키워드를 넘겨서 10권씩 가져옴. -->
<select id="searchlist" resultType="org.zerock.domain.Bs_BookVO">
	select *
	from bs_book
    <trim prefix="where" prefixOverrides="AND|OR">
		<if test="searchType=='title' and keyword != null and keyword != '' ">
			and bk_name like CONCAT('%', #{keyword}, '%')
		</if>
		<if test="searchType=='content' and keyword != null and keyword != '' ">
			and bk_writer like CONCAT('%', #{keyword}, '%')
		</if>
	</trim>
	order by bk_num desc
	limit #{startList}, #{listSize}	
</select>


<!-- 검색된 타입과 키워드를 넘겨서 검색된 책의 총 개수를 가져옴. -->
<select id="searchlistcnt" resultType="int">
	select count(*) as listCnt
	from bs_book
    <trim prefix="where" prefixOverrides="AND|OR">
		<if test="searchType=='title' and keyword != null and keyword != '' ">
			and bk_name like CONCAT('%', #{keyword}, '%')
		</if>
		<if test="searchType=='content' and keyword != null and keyword != '' ">
			and bk_writer like CONCAT('%', #{keyword}, '%')
		</if>
	</trim>
</select>

<!-- 책테이블에 책평균평점을 업데이트해줌. -->
<update id="revupdate">
	update bs_book set bk_rank=#{rank} where bk_num=#{bk_num}
</update>

<!-- 가져온 파라미터로 유저정보로 업데이트. -->
<update id="userupdate"> 
	update bs_user 
	
	 <trim prefix="set" suffixOverrides="," prefixOverrides=","> 
		<if test="user_pw != null and user_pw != '' ">
			, user_pw = #{user_pw} 
		</if>
		<if test="user_phone != null and user_phone != '' ">
			, user_phone = #{user_phone}
		</if>
		<if test="user_addr != null and user_addr != '' ">
			, user_addr = #{user_addr} ,
		</if>
	</trim>
	where user_id = #{user_id}; 
</update>

<!-- 유저아이디와 유저포인트를 가져와서 유저정보를 업데이트. -->
<update id="userpointupdate"> 
	update bs_user set user_point = #{user_point} where user_id = #{user_id}; 
</update>

<!-- 평점 순서대로 10권을 가져옴. -->
<select id="rankselect" resultType="org.zerock.domain.Bs_BookVO">
	select * from bs_book order by bk_rank desc limit 10
</select>

<!-- 판매순서대로 10권씩 가져옴. -->
<select id="revranklist" resultType="org.zerock.domain.Bs_BookVO">
	select * from bs_book
	order by bk_sellcnt desc, bk_rank desc
	limit #{startList}, #{listSize}
</select>

<!-- 판매순서대로 카운트값을 가져옴. -->
<select id="revranklistcnt" resultType="int">
	select count(*) as listCnt
	from bs_book
	order by bk_sellcnt desc, bk_rank desc
</select>

<!-- 출간일 순서대로 10권씩 가져옴. -->
<select id="newbooklist" resultType="org.zerock.domain.Bs_BookVO">
	select * from bs_book
	order by bk_pdate desc
	limit #{startList}, #{listSize}
</select>

<!-- 출간일 순서대로 카운트값을 가져옴. -->
<select id="newbooklistcnt" resultType="int">
	select count(*) as listCnt
	from bs_book
	order by bk_pdate desc
</select>

<!-- 책번호를 넘겨서 책에대한 정보를 가져옴. -->
<select resultType="org.zerock.domain.Bs_BookVO" id="detail">
	select * from bs_book where bk_num=#{bk_num} 
</select>

<!-- 책번호를 넘겨서 책에대한 댓글을 댓글이 작성된 순서대로 가져옴 -->
<select resultType="org.zerock.domain.Bs_ReviewVO" id="selectcomment">
	select * from bs_review where bk_num=#{bk_num} order by rev_num desc 
</select>

<!-- 책번호를 넘겨서 책에 관련된 댓글의 전체카운트를 가져옴. -->
<select resultType="int" id="decommentcnt">
	select count(*) as listCnt
	from bs_review 
	where bk_num=#{bk_num} 
</select>
<!-- 책번호를 넘겨서 책에 관련된 댓글을 10개씩 가져옴. -->
<select resultType="org.zerock.domain.Bs_ReviewVO" id="decomment">
	select * from bs_review 
	where bk_num=#{bk_num} 
	order by rev_num desc
	limit #{startList}, #{listSize}
</select>

<!-- 판매순서대로 10권을 가져옴. -->
<select id="bestselect" resultType="org.zerock.domain.Bs_BookVO">
	select * from bs_book order by bk_sellcnt desc, bk_rank desc limit 10
</select>


<select id="check" resultType="int">

	SELECT count(user_id)
	
	FROM bs_user
	
	WHERE user_id = #{userId}

</select>

<insert id="regiUser">

	INSERT INTO bs_user(user_id, user_name)
	
	VALUES(#{userId}, #{userNickName})

</insert>

<select id="infoUser" resultType="org.zerock.domain.Bs_UserVO">

	SELECT *
	
	FROM bs_user
	
	WHERE user_id = #{userId}
</select>

<select id="selectPoint" resultType="org.zerock.domain.Bs_UserVO">
	select * from bs_user where user_id = #{user_id}
</select>

</mapper>